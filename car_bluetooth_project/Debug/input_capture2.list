
input_capture2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003424  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003514  08003514  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003514  08003514  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800351c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003528  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003528  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008248  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001499  00000000  00000000  0002827c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00029718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018432  00000000  00000000  0002a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000990f  00000000  00000000  00042c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc14  00000000  00000000  0004c531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f60  00000000  00000000  000dc198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034cc 	.word	0x080034cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034cc 	.word	0x080034cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e05      	subs	r5, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f000 f83d 	bl	80002a4 <__clzsi2>
 800022a:	239e      	movs	r3, #158	; 0x9e
 800022c:	0004      	movs	r4, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	; 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	dd01      	ble.n	800023c <__aeabi_ui2f+0x1c>
 8000238:	3c08      	subs	r4, #8
 800023a:	40a5      	lsls	r5, r4
 800023c:	026d      	lsls	r5, r5, #9
 800023e:	0a6d      	lsrs	r5, r5, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2500      	movs	r5, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4328      	orrs	r0, r5
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	; 0x99
 8000250:	dd09      	ble.n	8000266 <__aeabi_ui2f+0x46>
 8000252:	0002      	movs	r2, r0
 8000254:	0029      	movs	r1, r5
 8000256:	321b      	adds	r2, #27
 8000258:	4091      	lsls	r1, r2
 800025a:	1e4a      	subs	r2, r1, #1
 800025c:	4191      	sbcs	r1, r2
 800025e:	2205      	movs	r2, #5
 8000260:	1a12      	subs	r2, r2, r0
 8000262:	40d5      	lsrs	r5, r2
 8000264:	430d      	orrs	r5, r1
 8000266:	2c05      	cmp	r4, #5
 8000268:	dc12      	bgt.n	8000290 <__aeabi_ui2f+0x70>
 800026a:	0029      	movs	r1, r5
 800026c:	4e0c      	ldr	r6, [pc, #48]	; (80002a0 <__aeabi_ui2f+0x80>)
 800026e:	4031      	ands	r1, r6
 8000270:	076a      	lsls	r2, r5, #29
 8000272:	d009      	beq.n	8000288 <__aeabi_ui2f+0x68>
 8000274:	200f      	movs	r0, #15
 8000276:	4028      	ands	r0, r5
 8000278:	2804      	cmp	r0, #4
 800027a:	d005      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800027c:	3104      	adds	r1, #4
 800027e:	014a      	lsls	r2, r1, #5
 8000280:	d502      	bpl.n	8000288 <__aeabi_ui2f+0x68>
 8000282:	239f      	movs	r3, #159	; 0x9f
 8000284:	4031      	ands	r1, r6
 8000286:	1b1b      	subs	r3, r3, r4
 8000288:	0189      	lsls	r1, r1, #6
 800028a:	0a4d      	lsrs	r5, r1, #9
 800028c:	b2d8      	uxtb	r0, r3
 800028e:	e7db      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000290:	1f62      	subs	r2, r4, #5
 8000292:	4095      	lsls	r5, r2
 8000294:	0029      	movs	r1, r5
 8000296:	4e02      	ldr	r6, [pc, #8]	; (80002a0 <__aeabi_ui2f+0x80>)
 8000298:	4031      	ands	r1, r6
 800029a:	076a      	lsls	r2, r5, #29
 800029c:	d0f4      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800029e:	e7e9      	b.n	8000274 <__aeabi_ui2f+0x54>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__clzsi2>:
 80002a4:	211c      	movs	r1, #28
 80002a6:	2301      	movs	r3, #1
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d301      	bcc.n	80002b2 <__clzsi2+0xe>
 80002ae:	0c00      	lsrs	r0, r0, #16
 80002b0:	3910      	subs	r1, #16
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	4298      	cmp	r0, r3
 80002b6:	d301      	bcc.n	80002bc <__clzsi2+0x18>
 80002b8:	0a00      	lsrs	r0, r0, #8
 80002ba:	3908      	subs	r1, #8
 80002bc:	091b      	lsrs	r3, r3, #4
 80002be:	4298      	cmp	r0, r3
 80002c0:	d301      	bcc.n	80002c6 <__clzsi2+0x22>
 80002c2:	0900      	lsrs	r0, r0, #4
 80002c4:	3904      	subs	r1, #4
 80002c6:	a202      	add	r2, pc, #8	; (adr r2, 80002d0 <__clzsi2+0x2c>)
 80002c8:	5c10      	ldrb	r0, [r2, r0]
 80002ca:	1840      	adds	r0, r0, r1
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	02020304 	.word	0x02020304
 80002d4:	01010101 	.word	0x01010101
	...

080002e0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 0 */
uint32_t Icval = 0;
uint32_t freq = 0;
float duty = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)//when channel-1 activated
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	7f1b      	ldrb	r3, [r3, #28]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d12a      	bne.n	8000346 <HAL_TIM_IC_CaptureCallback+0x66>
{

		 Icval = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2100      	movs	r1, #0
 80002f4:	0018      	movs	r0, r3
 80002f6:	f002 faad 	bl	8002854 <HAL_TIM_ReadCapturedValue>
 80002fa:	0002      	movs	r2, r0
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <HAL_TIM_IC_CaptureCallback+0x70>)
 80002fe:	601a      	str	r2, [r3, #0]

		 if(Icval!=0){
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d01e      	beq.n	8000346 <HAL_TIM_IC_CaptureCallback+0x66>
			duty = (HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_2)*100/Icval);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2104      	movs	r1, #4
 800030c:	0018      	movs	r0, r3
 800030e:	f002 faa1 	bl	8002854 <HAL_TIM_ReadCapturedValue>
 8000312:	0003      	movs	r3, r0
 8000314:	2264      	movs	r2, #100	; 0x64
 8000316:	435a      	muls	r2, r3
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <HAL_TIM_IC_CaptureCallback+0x70>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	0019      	movs	r1, r3
 800031e:	0010      	movs	r0, r2
 8000320:	f7ff fef2 	bl	8000108 <__udivsi3>
 8000324:	0003      	movs	r3, r0
 8000326:	0018      	movs	r0, r3
 8000328:	f7ff ff7a 	bl	8000220 <__aeabi_ui2f>
 800032c:	1c02      	adds	r2, r0, #0
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000330:	601a      	str	r2, [r3, #0]
			freq = 1000000/Icval;
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	0019      	movs	r1, r3
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <HAL_TIM_IC_CaptureCallback+0x78>)
 800033a:	f7ff fee5 	bl	8000108 <__udivsi3>
 800033e:	0003      	movs	r3, r0
 8000340:	001a      	movs	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000344:	601a      	str	r2, [r3, #0]
		 }
	 }
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b002      	add	sp, #8
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	200000b8 	.word	0x200000b8
 8000354:	200000c0 	.word	0x200000c0
 8000358:	000f4240 	.word	0x000f4240
 800035c:	200000bc 	.word	0x200000bc

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f000 fb72 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f820 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 f9c8 	bl	8000700 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000370:	f000 f864 	bl	800043c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000374:	f000 f916 	bl	80005a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);//direct mode
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <main+0x44>)
 800037a:	2100      	movs	r1, #0
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fdc1 	bl	8001f04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_2);//indirect mode
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <main+0x44>)
 8000384:	2104      	movs	r1, #4
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fcf4 	bl	8001d74 <HAL_TIM_IC_Start>
  //TIM1->CCR1 = 100;//pwm arrangement to %50
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);//starting pwm operation
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <main+0x48>)
 800038e:	2100      	movs	r1, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fbdf 	bl	8001b54 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000396:	23fa      	movs	r3, #250	; 0xfa
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	0018      	movs	r0, r3
 800039c:	f000 fbba 	bl	8000b14 <HAL_Delay>
 80003a0:	e7f9      	b.n	8000396 <main+0x36>
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000070 	.word	0x20000070
 80003a8:	20000028 	.word	0x20000028

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b093      	sub	sp, #76	; 0x4c
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	2414      	movs	r4, #20
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	0018      	movs	r0, r3
 80003b8:	2334      	movs	r3, #52	; 0x34
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f003 f87d 	bl	80034bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	0018      	movs	r0, r3
 80003c6:	2310      	movs	r3, #16
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f003 f876 	bl	80034bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d0:	0021      	movs	r1, r4
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2201      	movs	r2, #1
 80003d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2202      	movs	r2, #2
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	0252      	lsls	r2, r2, #9
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2280      	movs	r2, #128	; 0x80
 80003f0:	0312      	lsls	r2, r2, #12
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2200      	movs	r2, #0
 80003f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fe21 	bl	8001044 <HAL_RCC_OscConfig>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000406:	f000 f9fb 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2207      	movs	r2, #7
 800040e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2202      	movs	r2, #2
 8000414:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2101      	movs	r1, #1
 8000426:	0018      	movs	r0, r3
 8000428:	f001 f992 	bl	8001750 <HAL_RCC_ClockConfig>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000430:	f000 f9e6 	bl	8000800 <Error_Handler>
  }
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b013      	add	sp, #76	; 0x4c
 800043a:	bd90      	pop	{r4, r7, pc}

0800043c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b096      	sub	sp, #88	; 0x58
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	2348      	movs	r3, #72	; 0x48
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	2310      	movs	r3, #16
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f003 f835 	bl	80034bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	0018      	movs	r0, r3
 8000458:	2308      	movs	r3, #8
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f003 f82d 	bl	80034bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000462:	2324      	movs	r3, #36	; 0x24
 8000464:	18fb      	adds	r3, r7, r3
 8000466:	0018      	movs	r0, r3
 8000468:	231c      	movs	r3, #28
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f003 f825 	bl	80034bc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	0018      	movs	r0, r3
 8000476:	2320      	movs	r3, #32
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f003 f81e 	bl	80034bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000480:	4b46      	ldr	r3, [pc, #280]	; (800059c <MX_TIM1_Init+0x160>)
 8000482:	4a47      	ldr	r2, [pc, #284]	; (80005a0 <MX_TIM1_Init+0x164>)
 8000484:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000486:	4b45      	ldr	r3, [pc, #276]	; (800059c <MX_TIM1_Init+0x160>)
 8000488:	221f      	movs	r2, #31
 800048a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048c:	4b43      	ldr	r3, [pc, #268]	; (800059c <MX_TIM1_Init+0x160>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8000492:	4b42      	ldr	r3, [pc, #264]	; (800059c <MX_TIM1_Init+0x160>)
 8000494:	22c7      	movs	r2, #199	; 0xc7
 8000496:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b40      	ldr	r3, [pc, #256]	; (800059c <MX_TIM1_Init+0x160>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800049e:	4b3f      	ldr	r3, [pc, #252]	; (800059c <MX_TIM1_Init+0x160>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a4:	4b3d      	ldr	r3, [pc, #244]	; (800059c <MX_TIM1_Init+0x160>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004aa:	4b3c      	ldr	r3, [pc, #240]	; (800059c <MX_TIM1_Init+0x160>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 faa9 	bl	8001a04 <HAL_TIM_Base_Init>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80004b6:	f000 f9a3 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ba:	2148      	movs	r1, #72	; 0x48
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0152      	lsls	r2, r2, #5
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <MX_TIM1_Init+0x160>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 f8a8 	bl	8002620 <HAL_TIM_ConfigClockSource>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004d4:	f000 f994 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d8:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_TIM1_Init+0x160>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fae2 	bl	8001aa4 <HAL_TIM_PWM_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004e4:	f000 f98c 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_TIM1_Init+0x160>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 feed 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000506:	f000 f97b 	bl	8000800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050a:	2124      	movs	r1, #36	; 0x24
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2260      	movs	r2, #96	; 0x60
 8000510:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 99;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2263      	movs	r2, #99	; 0x63
 8000516:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000536:	1879      	adds	r1, r7, r1
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_TIM1_Init+0x160>)
 800053a:	2200      	movs	r2, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f001 ffa9 	bl	8002494 <HAL_TIM_PWM_ConfigChannel>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000546:	f000 f95b 	bl	8000800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0192      	lsls	r2, r2, #6
 800056e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000576:	1d3a      	adds	r2, r7, #4
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_TIM1_Init+0x160>)
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f002 ff0b 	bl	8003398 <HAL_TIMEx_ConfigBreakDeadTime>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000586:	f000 f93b 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <MX_TIM1_Init+0x160>)
 800058c:	0018      	movs	r0, r3
 800058e:	f000 f9c9 	bl	8000924 <HAL_TIM_MspPostInit>

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b016      	add	sp, #88	; 0x58
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	20000028 	.word	0x20000028
 80005a0:	40012c00 	.word	0x40012c00

080005a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b090      	sub	sp, #64	; 0x40
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	2330      	movs	r3, #48	; 0x30
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	0018      	movs	r0, r3
 80005b0:	2310      	movs	r3, #16
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f002 ff81 	bl	80034bc <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005ba:	231c      	movs	r3, #28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	2314      	movs	r3, #20
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f002 ff79 	bl	80034bc <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005ca:	230c      	movs	r3, #12
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2310      	movs	r3, #16
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 ff71 	bl	80034bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	2308      	movs	r3, #8
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f002 ff6a 	bl	80034bc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e8:	4b44      	ldr	r3, [pc, #272]	; (80006fc <MX_TIM2_Init+0x158>)
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	05d2      	lsls	r2, r2, #23
 80005ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80005f0:	4b42      	ldr	r3, [pc, #264]	; (80006fc <MX_TIM2_Init+0x158>)
 80005f2:	221f      	movs	r2, #31
 80005f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <MX_TIM2_Init+0x158>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005fc:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <MX_TIM2_Init+0x158>)
 80005fe:	2201      	movs	r2, #1
 8000600:	4252      	negs	r2, r2
 8000602:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000604:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <MX_TIM2_Init+0x158>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060a:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <MX_TIM2_Init+0x158>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000610:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <MX_TIM2_Init+0x158>)
 8000612:	0018      	movs	r0, r3
 8000614:	f001 f9f6 	bl	8001a04 <HAL_TIM_Base_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800061c:	f000 f8f0 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000620:	2130      	movs	r1, #48	; 0x30
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0152      	lsls	r2, r2, #5
 8000628:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800062a:	187a      	adds	r2, r7, r1
 800062c:	4b33      	ldr	r3, [pc, #204]	; (80006fc <MX_TIM2_Init+0x158>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fff5 	bl	8002620 <HAL_TIM_ConfigClockSource>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800063a:	f000 f8e1 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <MX_TIM2_Init+0x158>)
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fb3f 	bl	8001cc4 <HAL_TIM_IC_Init>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800064a:	f000 f8d9 	bl	8000800 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800064e:	211c      	movs	r1, #28
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2204      	movs	r2, #4
 8000654:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2250      	movs	r2, #80	; 0x50
 800065a:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800066e:	187a      	adds	r2, r7, r1
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_TIM2_Init+0x158>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f002 f8a7 	bl	80027c8 <HAL_TIM_SlaveConfigSynchro>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800067e:	f000 f8bf 	bl	8000800 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000682:	210c      	movs	r1, #12
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800069c:	1879      	adds	r1, r7, r1
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_TIM2_Init+0x158>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 fe52 	bl	800234c <HAL_TIM_IC_ConfigChannel>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 80006ac:	f000 f8a8 	bl	8000800 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006b0:	210c      	movs	r1, #12
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2202      	movs	r2, #2
 80006bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006be:	1879      	adds	r1, r7, r1
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_TIM2_Init+0x158>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fe41 	bl	800234c <HAL_TIM_IC_ConfigChannel>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 80006ce:	f000 f897 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_TIM2_Init+0x158>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fdf9 	bl	80032dc <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0x14e>
  {
    Error_Handler();
 80006ee:	f000 f887 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b010      	add	sp, #64	; 0x40
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000070 	.word	0x20000070

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	240c      	movs	r4, #12
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f002 fed3 	bl	80034bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <MX_GPIO_Init+0xf8>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0309      	lsls	r1, r1, #12
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	031b      	lsls	r3, r3, #12
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000734:	695a      	ldr	r2, [r3, #20]
 8000736:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	03c9      	lsls	r1, r1, #15
 800073c:	430a      	orrs	r2, r1
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0xf8>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0289      	lsls	r1, r1, #10
 8000758:	430a      	orrs	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xf8>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	029b      	lsls	r3, r3, #10
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076a:	2390      	movs	r3, #144	; 0x90
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fc48 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	0192      	lsls	r2, r2, #6
 800077e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2284      	movs	r2, #132	; 0x84
 8000784:	0392      	lsls	r2, r2, #14
 8000786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078e:	193b      	adds	r3, r7, r4
 8000790:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <MX_GPIO_Init+0xfc>)
 8000792:	0019      	movs	r1, r3
 8000794:	0010      	movs	r0, r2
 8000796:	f000 fabf 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	220c      	movs	r2, #12
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2202      	movs	r2, #2
 80007a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2201      	movs	r2, #1
 80007b6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	193a      	adds	r2, r7, r4
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 faa9 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2220      	movs	r2, #32
 80007cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e0:	187a      	adds	r2, r7, r1
 80007e2:	2390      	movs	r3, #144	; 0x90
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fa95 	bl	8000d18 <HAL_GPIO_Init>

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b009      	add	sp, #36	; 0x24
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	619a      	str	r2, [r3, #24]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	69da      	ldr	r2, [r3, #28]
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0549      	lsls	r1, r1, #21
 8000834:	430a      	orrs	r2, r1
 8000836:	61da      	str	r2, [r3, #28]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_MspInit+0x44>)
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	055b      	lsls	r3, r3, #21
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	2314      	movs	r3, #20
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f002 fe28 	bl	80034bc <memset>
  if(htim_base->Instance==TIM1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <HAL_TIM_Base_MspInit+0xc8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10e      	bne.n	8000894 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 8000878:	699a      	ldr	r2, [r3, #24]
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0109      	lsls	r1, r1, #4
 8000880:	430a      	orrs	r2, r1
 8000882:	619a      	str	r2, [r3, #24]
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 8000886:	699a      	ldr	r2, [r3, #24]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000892:	e03e      	b.n	8000912 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	429a      	cmp	r2, r3
 800089e:	d138      	bne.n	8000912 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	61da      	str	r2, [r3, #28]
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	2201      	movs	r2, #1
 80008b2:	4013      	ands	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	0289      	lsls	r1, r1, #10
 80008c2:	430a      	orrs	r2, r1
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_TIM_Base_MspInit+0xcc>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	029b      	lsls	r3, r3, #10
 80008ce:	4013      	ands	r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d4:	2114      	movs	r1, #20
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2201      	movs	r2, #1
 80008da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2202      	movs	r2, #2
 80008e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2202      	movs	r2, #2
 80008f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	187a      	adds	r2, r7, r1
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fa0b 	bl	8000d18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f9d4 	bl	8000cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800090c:	200f      	movs	r0, #15
 800090e:	f000 f9e6 	bl	8000cde <HAL_NVIC_EnableIRQ>
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b00a      	add	sp, #40	; 0x28
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40012c00 	.word	0x40012c00
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	240c      	movs	r4, #12
 800092e:	193b      	adds	r3, r7, r4
 8000930:	0018      	movs	r0, r3
 8000932:	2314      	movs	r3, #20
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f002 fdc0 	bl	80034bc <memset>
  if(htim->Instance==TIM1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a16      	ldr	r2, [pc, #88]	; (800099c <HAL_TIM_MspPostInit+0x78>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d125      	bne.n	8000992 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_TIM_MspPostInit+0x7c>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_TIM_MspPostInit+0x7c>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0289      	lsls	r1, r1, #10
 8000950:	430a      	orrs	r2, r1
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_TIM_MspPostInit+0x7c>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	029b      	lsls	r3, r3, #10
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	0052      	lsls	r2, r2, #1
 8000968:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	0021      	movs	r1, r4
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2202      	movs	r2, #2
 8000970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2202      	movs	r2, #2
 8000982:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	187a      	adds	r2, r7, r1
 8000986:	2390      	movs	r3, #144	; 0x90
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 f9c3 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b009      	add	sp, #36	; 0x24
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f888 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <TIM2_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fba0 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000070 	.word	0x20000070

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a22:	f7ff ffe3 	bl	80009ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a26:	f002 fd25 	bl	8003474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fc99 	bl	8000360 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a3c:	0800351c 	.word	0x0800351c
  ldr r2, =_sbss
 8000a40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a44:	200000c8 	.word	0x200000c8

08000a48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_COMP_IRQHandler>
	...

08000a4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_Init+0x24>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_Init+0x24>)
 8000a56:	2110      	movs	r1, #16
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f809 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a62:	f7ff fed3 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000a7e:	681c      	ldr	r4, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x60>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	0019      	movs	r1, r3
 8000a86:	23fa      	movs	r3, #250	; 0xfa
 8000a88:	0098      	lsls	r0, r3, #2
 8000a8a:	f7ff fb3d 	bl	8000108 <__udivsi3>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	0019      	movs	r1, r3
 8000a92:	0020      	movs	r0, r4
 8000a94:	f7ff fb38 	bl	8000108 <__udivsi3>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f92f 	bl	8000cfe <HAL_SYSTICK_Config>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e00f      	b.n	8000ac8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d80b      	bhi.n	8000ac6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425b      	negs	r3, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 f8fc 	bl	8000cb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_InitTick+0x64>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b003      	add	sp, #12
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	18d2      	adds	r2, r2, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000008 	.word	0x20000008
 8000afc:	200000c4 	.word	0x200000c4

08000b00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	200000c4 	.word	0x200000c4

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff0 	bl	8000b00 <HAL_GetTick>
 8000b20:	0003      	movs	r3, r0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	189b      	adds	r3, r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	f7ff ffe0 	bl	8000b00 <HAL_GetTick>
 8000b40:	0002      	movs	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b6e:	d809      	bhi.n	8000b84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	231f      	movs	r3, #31
 8000b78:	401a      	ands	r2, r3
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_EnableIRQ+0x30>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4091      	lsls	r1, r2
 8000b80:	000a      	movs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba4:	d828      	bhi.n	8000bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <__NVIC_SetPriority+0xd4>)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	33c0      	adds	r3, #192	; 0xc0
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	589b      	ldr	r3, [r3, r2]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	; 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <__NVIC_SetPriority+0xd4>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bf6:	e031      	b.n	8000c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0019      	movs	r1, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	400b      	ands	r3, r1
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3306      	adds	r3, #6
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	3304      	adds	r3, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	; 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001c      	movs	r4, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	4023      	ands	r3, r4
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	3306      	adds	r3, #6
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18c3      	adds	r3, r0, r3
 8000c58:	3304      	adds	r3, #4
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b003      	add	sp, #12
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	045b      	lsls	r3, r3, #17
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d301      	bcc.n	8000c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c80:	2301      	movs	r3, #1
 8000c82:	e010      	b.n	8000ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <SysTick_Config+0x44>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	425b      	negs	r3, r3
 8000c90:	2103      	movs	r1, #3
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff7c 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x44>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x44>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff33 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ffaf 	bl	8000c6c <SysTick_Config>
 8000d0e:	0003      	movs	r3, r0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e155      	b.n	8000fd4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d100      	bne.n	8000d40 <HAL_GPIO_Init+0x28>
 8000d3e:	e146      	b.n	8000fce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2203      	movs	r2, #3
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2203      	movs	r2, #3
 8000d52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	2201      	movs	r2, #1
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	58d3      	ldr	r3, [r2, r3]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2207      	movs	r2, #7
 8000e14:	4013      	ands	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	400b      	ands	r3, r1
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	6939      	ldr	r1, [r7, #16]
 8000e48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	029b      	lsls	r3, r3, #10
 8000e86:	4013      	ands	r3, r2
 8000e88:	d100      	bne.n	8000e8c <HAL_GPIO_Init+0x174>
 8000e8a:	e0a0      	b.n	8000fce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b57      	ldr	r3, [pc, #348]	; (8000fec <HAL_GPIO_Init+0x2d4>)
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	4b56      	ldr	r3, [pc, #344]	; (8000fec <HAL_GPIO_Init+0x2d4>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	430a      	orrs	r2, r1
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	4b54      	ldr	r3, [pc, #336]	; (8000fec <HAL_GPIO_Init+0x2d4>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	589b      	ldr	r3, [r3, r2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	2390      	movs	r3, #144	; 0x90
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x1ea>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x1e6>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a45      	ldr	r2, [pc, #276]	; (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a44      	ldr	r2, [pc, #272]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x1de>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e008      	b.n	8000f08 <HAL_GPIO_Init+0x1f0>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x1f0>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x1f0>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x1f0>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x1f0>
 8000f06:	2300      	movs	r3, #0
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	035b      	lsls	r3, r3, #13
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	039b      	lsls	r3, r3, #14
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	1e13      	subs	r3, r2, #0
 8000fde:	d000      	beq.n	8000fe2 <HAL_GPIO_Init+0x2ca>
 8000fe0:	e6a2      	b.n	8000d28 <HAL_GPIO_Init+0x10>
  } 
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00
 8001000:	48001000 	.word	0x48001000
 8001004:	40010400 	.word	0x40010400

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	0008      	movs	r0, r1
 8001012:	0011      	movs	r1, r2
 8001014:	1cbb      	adds	r3, r7, #2
 8001016:	1c02      	adds	r2, r0, #0
 8001018:	801a      	strh	r2, [r3, #0]
 800101a:	1c7b      	adds	r3, r7, #1
 800101c:	1c0a      	adds	r2, r1, #0
 800101e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001020:	1c7b      	adds	r3, r7, #1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001028:	1cbb      	adds	r3, r7, #2
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001032:	1cbb      	adds	r3, r7, #2
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	f000 fb76 	bl	8001744 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2201      	movs	r2, #1
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_RCC_OscConfig+0x20>
 8001062:	e08e      	b.n	8001182 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001064:	4bc5      	ldr	r3, [pc, #788]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	220c      	movs	r2, #12
 800106a:	4013      	ands	r3, r2
 800106c:	2b04      	cmp	r3, #4
 800106e:	d00e      	beq.n	800108e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001070:	4bc2      	ldr	r3, [pc, #776]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	220c      	movs	r2, #12
 8001076:	4013      	ands	r3, r2
 8001078:	2b08      	cmp	r3, #8
 800107a:	d117      	bne.n	80010ac <HAL_RCC_OscConfig+0x68>
 800107c:	4bbf      	ldr	r3, [pc, #764]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	23c0      	movs	r3, #192	; 0xc0
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	401a      	ands	r2, r3
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	025b      	lsls	r3, r3, #9
 800108a:	429a      	cmp	r2, r3
 800108c:	d10e      	bne.n	80010ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108e:	4bbb      	ldr	r3, [pc, #748]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	029b      	lsls	r3, r3, #10
 8001096:	4013      	ands	r3, r2
 8001098:	d100      	bne.n	800109c <HAL_RCC_OscConfig+0x58>
 800109a:	e071      	b.n	8001180 <HAL_RCC_OscConfig+0x13c>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d000      	beq.n	80010a6 <HAL_RCC_OscConfig+0x62>
 80010a4:	e06c      	b.n	8001180 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f000 fb4c 	bl	8001744 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d107      	bne.n	80010c4 <HAL_RCC_OscConfig+0x80>
 80010b4:	4bb1      	ldr	r3, [pc, #708]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4bb0      	ldr	r3, [pc, #704]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0249      	lsls	r1, r1, #9
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e02f      	b.n	8001124 <HAL_RCC_OscConfig+0xe0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10c      	bne.n	80010e6 <HAL_RCC_OscConfig+0xa2>
 80010cc:	4bab      	ldr	r3, [pc, #684]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4baa      	ldr	r3, [pc, #680]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010d2:	49ab      	ldr	r1, [pc, #684]	; (8001380 <HAL_RCC_OscConfig+0x33c>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	4ba8      	ldr	r3, [pc, #672]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4ba7      	ldr	r3, [pc, #668]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010de:	49a9      	ldr	r1, [pc, #676]	; (8001384 <HAL_RCC_OscConfig+0x340>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e01e      	b.n	8001124 <HAL_RCC_OscConfig+0xe0>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	d10e      	bne.n	800110c <HAL_RCC_OscConfig+0xc8>
 80010ee:	4ba3      	ldr	r3, [pc, #652]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4ba2      	ldr	r3, [pc, #648]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	02c9      	lsls	r1, r1, #11
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	4b9f      	ldr	r3, [pc, #636]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b9e      	ldr	r3, [pc, #632]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0249      	lsls	r1, r1, #9
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xe0>
 800110c:	4b9b      	ldr	r3, [pc, #620]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b9a      	ldr	r3, [pc, #616]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001112:	499b      	ldr	r1, [pc, #620]	; (8001380 <HAL_RCC_OscConfig+0x33c>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4b98      	ldr	r3, [pc, #608]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b97      	ldr	r3, [pc, #604]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800111e:	4999      	ldr	r1, [pc, #612]	; (8001384 <HAL_RCC_OscConfig+0x340>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d014      	beq.n	8001156 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fce8 	bl	8000b00 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fce3 	bl	8000b00 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e2fd      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001148:	4b8c      	ldr	r3, [pc, #560]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0xf2>
 8001154:	e015      	b.n	8001182 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fcd3 	bl	8000b00 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fcce 	bl	8000b00 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e2e8      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b82      	ldr	r3, [pc, #520]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4013      	ands	r3, r2
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x11c>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x14a>
 800118c:	e06c      	b.n	8001268 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800118e:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	220c      	movs	r2, #12
 8001194:	4013      	ands	r3, r2
 8001196:	d00e      	beq.n	80011b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001198:	4b78      	ldr	r3, [pc, #480]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	220c      	movs	r2, #12
 800119e:	4013      	ands	r3, r2
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d11f      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1a0>
 80011a4:	4b75      	ldr	r3, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	401a      	ands	r2, r3
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b71      	ldr	r3, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x188>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e2bb      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b6b      	ldr	r3, [pc, #428]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22f8      	movs	r2, #248	; 0xf8
 80011d2:	4393      	bics	r3, r2
 80011d4:	0019      	movs	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00da      	lsls	r2, r3, #3
 80011dc:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e041      	b.n	8001268 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d024      	beq.n	8001236 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b63      	ldr	r3, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc82 	bl	8000b00 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fc7d 	bl	8000b00 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e297      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2202      	movs	r2, #2
 800121a:	4013      	ands	r3, r2
 800121c:	d0f1      	beq.n	8001202 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b57      	ldr	r3, [pc, #348]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	22f8      	movs	r2, #248	; 0xf8
 8001224:	4393      	bics	r3, r2
 8001226:	0019      	movs	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	00da      	lsls	r2, r3, #3
 800122e:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e018      	b.n	8001268 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b51      	ldr	r3, [pc, #324]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800123c:	2101      	movs	r1, #1
 800123e:	438a      	bics	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fc5d 	bl	8000b00 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fc58 	bl	8000b00 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e272      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2202      	movs	r2, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d1f1      	bne.n	800124c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2208      	movs	r2, #8
 800126e:	4013      	ands	r3, r2
 8001270:	d036      	beq.n	80012e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800127c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fc3b 	bl	8000b00 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fc36 	bl	8000b00 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e250      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f1      	beq.n	8001290 <HAL_RCC_OscConfig+0x24c>
 80012ac:	e018      	b.n	80012e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80012b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	438a      	bics	r2, r1
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fc21 	bl	8000b00 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc1c 	bl	8000b00 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e236      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d1f1      	bne.n	80012c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d100      	bne.n	80012ec <HAL_RCC_OscConfig+0x2a8>
 80012ea:	e0b5      	b.n	8001458 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ec:	201f      	movs	r0, #31
 80012ee:	183b      	adds	r3, r7, r0
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	055b      	lsls	r3, r3, #21
 80012fc:	4013      	ands	r3, r2
 80012fe:	d110      	bne.n	8001322 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	0549      	lsls	r1, r1, #21
 800130a:	430a      	orrs	r2, r1
 800130c:	61da      	str	r2, [r3, #28]
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	055b      	lsls	r3, r3, #21
 8001316:	4013      	ands	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800131c:	183b      	adds	r3, r7, r0
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_OscConfig+0x344>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4013      	ands	r3, r2
 800132c:	d11a      	bne.n	8001364 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_RCC_OscConfig+0x344>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_RCC_OscConfig+0x344>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0049      	lsls	r1, r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133c:	f7ff fbe0 	bl	8000b00 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001346:	f7ff fbdb 	bl	8000b00 <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b64      	cmp	r3, #100	; 0x64
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1f5      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_RCC_OscConfig+0x344>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4013      	ands	r3, r2
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10f      	bne.n	800138c <HAL_RCC_OscConfig+0x348>
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_RCC_OscConfig+0x338>)
 800136e:	6a1a      	ldr	r2, [r3, #32]
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	621a      	str	r2, [r3, #32]
 8001378:	e036      	b.n	80013e8 <HAL_RCC_OscConfig+0x3a4>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40021000 	.word	0x40021000
 8001380:	fffeffff 	.word	0xfffeffff
 8001384:	fffbffff 	.word	0xfffbffff
 8001388:	40007000 	.word	0x40007000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x36a>
 8001394:	4bca      	ldr	r3, [pc, #808]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4bc9      	ldr	r3, [pc, #804]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	4bc7      	ldr	r3, [pc, #796]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4bc6      	ldr	r3, [pc, #792]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x3a4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x38c>
 80013b6:	4bc2      	ldr	r3, [pc, #776]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6a1a      	ldr	r2, [r3, #32]
 80013ba:	4bc1      	ldr	r3, [pc, #772]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013bc:	2104      	movs	r1, #4
 80013be:	430a      	orrs	r2, r1
 80013c0:	621a      	str	r2, [r3, #32]
 80013c2:	4bbf      	ldr	r3, [pc, #764]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	4bbe      	ldr	r3, [pc, #760]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	621a      	str	r2, [r3, #32]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0x3a4>
 80013d0:	4bbb      	ldr	r3, [pc, #748]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	438a      	bics	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	4bb8      	ldr	r3, [pc, #736]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	4bb7      	ldr	r3, [pc, #732]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	2104      	movs	r1, #4
 80013e4:	438a      	bics	r2, r1
 80013e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d014      	beq.n	800141a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fb86 	bl	8000b00 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	e009      	b.n	800140e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fb81 	bl	8000b00 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4aaf      	ldr	r2, [pc, #700]	; (80016c4 <HAL_RCC_OscConfig+0x680>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e19a      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140e:	4bac      	ldr	r3, [pc, #688]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x3b6>
 8001418:	e013      	b.n	8001442 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb71 	bl	8000b00 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	e009      	b.n	8001438 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb6c 	bl	8000b00 <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	4aa5      	ldr	r2, [pc, #660]	; (80016c4 <HAL_RCC_OscConfig+0x680>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e185      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4ba1      	ldr	r3, [pc, #644]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001442:	231f      	movs	r3, #31
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144c:	4b9c      	ldr	r3, [pc, #624]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	4b9b      	ldr	r3, [pc, #620]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001452:	499d      	ldr	r1, [pc, #628]	; (80016c8 <HAL_RCC_OscConfig+0x684>)
 8001454:	400a      	ands	r2, r1
 8001456:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2210      	movs	r2, #16
 800145e:	4013      	ands	r3, r2
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d12a      	bne.n	80014c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800146a:	4b95      	ldr	r3, [pc, #596]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001470:	2104      	movs	r1, #4
 8001472:	430a      	orrs	r2, r1
 8001474:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001476:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147a:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800147c:	2101      	movs	r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fb3d 	bl	8000b00 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800148c:	f7ff fb38 	bl	8000b00 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e152      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f1      	beq.n	800148c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014a8:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	22f8      	movs	r2, #248	; 0xf8
 80014ae:	4393      	bics	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	00da      	lsls	r2, r3, #3
 80014b8:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e034      	b.n	800152a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	3305      	adds	r3, #5
 80014c6:	d111      	bne.n	80014ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014c8:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	2104      	movs	r1, #4
 80014d0:	438a      	bics	r2, r1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014d4:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	22f8      	movs	r2, #248	; 0xf8
 80014da:	4393      	bics	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	00da      	lsls	r2, r3, #3
 80014e4:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ea:	e01e      	b.n	800152a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ec:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f0:	4b73      	ldr	r3, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	430a      	orrs	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fc:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80014fe:	2101      	movs	r1, #1
 8001500:	438a      	bics	r2, r1
 8001502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001504:	f7ff fafc 	bl	8000b00 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800150e:	f7ff faf7 	bl	8000b00 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e111      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001520:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f1      	bne.n	800150e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2220      	movs	r2, #32
 8001530:	4013      	ands	r3, r2
 8001532:	d05c      	beq.n	80015ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	4013      	ands	r3, r2
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d00e      	beq.n	800155e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001540:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	220c      	movs	r2, #12
 8001546:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001548:	2b08      	cmp	r3, #8
 800154a:	d114      	bne.n	8001576 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800154c:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	23c0      	movs	r3, #192	; 0xc0
 8001552:	025b      	lsls	r3, r3, #9
 8001554:	401a      	ands	r2, r3
 8001556:	23c0      	movs	r3, #192	; 0xc0
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	429a      	cmp	r2, r3
 800155c:	d10b      	bne.n	8001576 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800155e:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	4013      	ands	r3, r2
 8001568:	d040      	beq.n	80015ec <HAL_RCC_OscConfig+0x5a8>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d03c      	beq.n	80015ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0e6      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01b      	beq.n	80015b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800157e:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001582:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	0249      	lsls	r1, r1, #9
 8001588:	430a      	orrs	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fab8 	bl	8000b00 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001596:	f7ff fab3 	bl	8000b00 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0cd      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x552>
 80015b4:	e01b      	b.n	80015ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015b6:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80015bc:	4943      	ldr	r1, [pc, #268]	; (80016cc <HAL_RCC_OscConfig+0x688>)
 80015be:	400a      	ands	r2, r1
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa9d 	bl	8000b00 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015cc:	f7ff fa98 	bl	8000b00 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0b2      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80015e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x588>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d100      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5b4>
 80015f6:	e0a4      	b.n	8001742 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f8:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	220c      	movs	r2, #12
 80015fe:	4013      	ands	r3, r2
 8001600:	2b08      	cmp	r3, #8
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x5c2>
 8001604:	e078      	b.n	80016f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	2b02      	cmp	r3, #2
 800160c:	d14c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001614:	492e      	ldr	r1, [pc, #184]	; (80016d0 <HAL_RCC_OscConfig+0x68c>)
 8001616:	400a      	ands	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fa71 	bl	8000b00 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fa6c 	bl	8000b00 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e086      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	049b      	lsls	r3, r3, #18
 800163e:	4013      	ands	r3, r2
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	220f      	movs	r2, #15
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001652:	430a      	orrs	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <HAL_RCC_OscConfig+0x690>)
 800165c:	4013      	ands	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	431a      	orrs	r2, r3
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0449      	lsls	r1, r1, #17
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fa3f 	bl	8000b00 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fa3a 	bl	8000b00 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e054      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	049b      	lsls	r3, r3, #18
 80016a2:	4013      	ands	r3, r2
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x644>
 80016a6:	e04c      	b.n	8001742 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_RCC_OscConfig+0x67c>)
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <HAL_RCC_OscConfig+0x68c>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa24 	bl	8000b00 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x6a6>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40021000 	.word	0x40021000
 80016c4:	00001388 	.word	0x00001388
 80016c8:	efffffff 	.word	0xefffffff
 80016cc:	fffeffff 	.word	0xfffeffff
 80016d0:	feffffff 	.word	0xfeffffff
 80016d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fa12 	bl	8000b00 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e02c      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_RCC_OscConfig+0x708>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	049b      	lsls	r3, r3, #18
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x694>
 80016f6:	e024      	b.n	8001742 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e01f      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_RCC_OscConfig+0x708>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_OscConfig+0x708>)
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	429a      	cmp	r2, r3
 800171e:	d10e      	bne.n	800173e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	220f      	movs	r2, #15
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d107      	bne.n	800173e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	23f0      	movs	r3, #240	; 0xf0
 8001732:	039b      	lsls	r3, r3, #14
 8001734:	401a      	ands	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b008      	add	sp, #32
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0bf      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b61      	ldr	r3, [pc, #388]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d911      	bls.n	8001796 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	4393      	bics	r3, r2
 800177a:	0019      	movs	r1, r3
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0a6      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2202      	movs	r2, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d015      	beq.n	80017cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2204      	movs	r2, #4
 80017a6:	4013      	ands	r3, r2
 80017a8:	d006      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017aa:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80017b0:	21e0      	movs	r1, #224	; 0xe0
 80017b2:	00c9      	lsls	r1, r1, #3
 80017b4:	430a      	orrs	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	22f0      	movs	r2, #240	; 0xf0
 80017be:	4393      	bics	r3, r2
 80017c0:	0019      	movs	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4013      	ands	r3, r2
 80017d4:	d04c      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	029b      	lsls	r3, r3, #10
 80017e6:	4013      	ands	r3, r2
 80017e8:	d120      	bne.n	800182c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07a      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	049b      	lsls	r3, r3, #18
 80017fe:	4013      	ands	r3, r2
 8001800:	d114      	bne.n	800182c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06e      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	025b      	lsls	r3, r3, #9
 8001816:	4013      	ands	r3, r2
 8001818:	d108      	bne.n	800182c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e062      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e05b      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4393      	bics	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff f95e 	bl	8000b00 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001848:	e009      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f7ff f959 	bl	8000b00 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <HAL_RCC_ClockConfig+0x1a4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e042      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	220c      	movs	r2, #12
 8001864:	401a      	ands	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1ec      	bne.n	800184a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d211      	bcs.n	80018a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4393      	bics	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x19c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	4013      	ands	r3, r2
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e020      	b.n	80018e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4013      	ands	r3, r2
 80018aa:	d009      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_RCC_ClockConfig+0x1a8>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018c0:	f000 f820 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018c4:	0001      	movs	r1, r0
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1a0>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	220f      	movs	r2, #15
 80018ce:	4013      	ands	r3, r2
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1ac>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	000a      	movs	r2, r1
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1b0>)
 80018da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff f8c9 	bl	8000a74 <HAL_InitTick>
  
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	00001388 	.word	0x00001388
 80018f8:	fffff8ff 	.word	0xfffff8ff
 80018fc:	08003504 	.word	0x08003504
 8001900:	20000000 	.word	0x20000000

08001904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b08f      	sub	sp, #60	; 0x3c
 8001908:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800190a:	2314      	movs	r3, #20
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001910:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001912:	c313      	stmia	r3!, {r0, r1, r4}
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4a36      	ldr	r2, [pc, #216]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800191c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800191e:	c313      	stmia	r3!, {r0, r1, r4}
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	220c      	movs	r2, #12
 8001942:	4013      	ands	r3, r2
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d047      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001948:	d849      	bhi.n	80019de <HAL_RCC_GetSysClockFreq+0xda>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d002      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x50>
 800194e:	2b08      	cmp	r3, #8
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x56>
 8001952:	e044      	b.n	80019de <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001958:	e044      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	220f      	movs	r2, #15
 8001960:	4013      	ands	r3, r2
 8001962:	2214      	movs	r2, #20
 8001964:	18ba      	adds	r2, r7, r2
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	220f      	movs	r2, #15
 8001970:	4013      	ands	r3, r2
 8001972:	1d3a      	adds	r2, r7, #4
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	401a      	ands	r2, r3
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	429a      	cmp	r2, r3
 8001986:	d109      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198a:	481c      	ldr	r0, [pc, #112]	; (80019fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800198c:	f7fe fbbc 	bl	8000108 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	001a      	movs	r2, r3
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	4353      	muls	r3, r2
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	e01a      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	401a      	ands	r2, r3
 80019a4:	23c0      	movs	r3, #192	; 0xc0
 80019a6:	025b      	lsls	r3, r3, #9
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d109      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019b0:	f7fe fbaa 	bl	8000108 <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	001a      	movs	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	4353      	muls	r3, r2
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
 80019be:	e008      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c4:	f7fe fba0 	bl	8000108 <__udivsi3>
 80019c8:	0003      	movs	r3, r0
 80019ca:	001a      	movs	r2, r3
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	4353      	muls	r3, r2
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d6:	e005      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019dc:	e002      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b00f      	add	sp, #60	; 0x3c
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	080034e4 	.word	0x080034e4
 80019f4:	080034f4 	.word	0x080034f4
 80019f8:	40021000 	.word	0x40021000
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	02dc6c00 	.word	0x02dc6c00

08001a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e042      	b.n	8001a9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223d      	movs	r2, #61	; 0x3d
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	223c      	movs	r2, #60	; 0x3c
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7fe ff11 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	223d      	movs	r2, #61	; 0x3d
 8001a36:	2102      	movs	r1, #2
 8001a38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3304      	adds	r3, #4
 8001a42:	0019      	movs	r1, r3
 8001a44:	0010      	movs	r0, r2
 8001a46:	f000 ff59 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2246      	movs	r2, #70	; 0x46
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	223e      	movs	r2, #62	; 0x3e
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223f      	movs	r2, #63	; 0x3f
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2241      	movs	r2, #65	; 0x41
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2242      	movs	r2, #66	; 0x42
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2243      	movs	r2, #67	; 0x43
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2244      	movs	r2, #68	; 0x44
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2245      	movs	r2, #69	; 0x45
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	223d      	movs	r2, #61	; 0x3d
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e042      	b.n	8001b3c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	223d      	movs	r2, #61	; 0x3d
 8001aba:	5c9b      	ldrb	r3, [r3, r2]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	223c      	movs	r2, #60	; 0x3c
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 f839 	bl	8001b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	223d      	movs	r2, #61	; 0x3d
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	f000 ff09 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2246      	movs	r2, #70	; 0x46
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	223e      	movs	r2, #62	; 0x3e
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	223f      	movs	r2, #63	; 0x3f
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2241      	movs	r2, #65	; 0x41
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2242      	movs	r2, #66	; 0x42
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2243      	movs	r2, #67	; 0x43
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2244      	movs	r2, #68	; 0x44
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2245      	movs	r2, #69	; 0x45
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	223d      	movs	r2, #61	; 0x3d
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b002      	add	sp, #8
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d108      	bne.n	8001b76 <HAL_TIM_PWM_Start+0x22>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	223e      	movs	r2, #62	; 0x3e
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	1e5a      	subs	r2, r3, #1
 8001b70:	4193      	sbcs	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	e01f      	b.n	8001bb6 <HAL_TIM_PWM_Start+0x62>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d108      	bne.n	8001b8e <HAL_TIM_PWM_Start+0x3a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	223f      	movs	r2, #63	; 0x3f
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	4193      	sbcs	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	e013      	b.n	8001bb6 <HAL_TIM_PWM_Start+0x62>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d108      	bne.n	8001ba6 <HAL_TIM_PWM_Start+0x52>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	1e5a      	subs	r2, r3, #1
 8001ba0:	4193      	sbcs	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	e007      	b.n	8001bb6 <HAL_TIM_PWM_Start+0x62>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	; 0x41
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	4193      	sbcs	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e074      	b.n	8001ca8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <HAL_TIM_PWM_Start+0x7a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	223e      	movs	r2, #62	; 0x3e
 8001bc8:	2102      	movs	r1, #2
 8001bca:	5499      	strb	r1, [r3, r2]
 8001bcc:	e013      	b.n	8001bf6 <HAL_TIM_PWM_Start+0xa2>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d104      	bne.n	8001bde <HAL_TIM_PWM_Start+0x8a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	223f      	movs	r2, #63	; 0x3f
 8001bd8:	2102      	movs	r1, #2
 8001bda:	5499      	strb	r1, [r3, r2]
 8001bdc:	e00b      	b.n	8001bf6 <HAL_TIM_PWM_Start+0xa2>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d104      	bne.n	8001bee <HAL_TIM_PWM_Start+0x9a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	2102      	movs	r1, #2
 8001bea:	5499      	strb	r1, [r3, r2]
 8001bec:	e003      	b.n	8001bf6 <HAL_TIM_PWM_Start+0xa2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2241      	movs	r2, #65	; 0x41
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 fb48 	bl	8003294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_TIM_PWM_Start+0x15c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00e      	beq.n	8001c2c <HAL_TIM_PWM_Start+0xd8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_TIM_PWM_Start+0x160>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_TIM_PWM_Start+0xd8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_TIM_PWM_Start+0x164>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_TIM_PWM_Start+0xd8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_TIM_PWM_Start+0x168>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_TIM_PWM_Start+0xdc>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_TIM_PWM_Start+0xde>
 8001c30:	2300      	movs	r3, #0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0209      	lsls	r1, r1, #8
 8001c44:	430a      	orrs	r2, r1
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_TIM_PWM_Start+0x15c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00f      	beq.n	8001c72 <HAL_TIM_PWM_Start+0x11e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d009      	beq.n	8001c72 <HAL_TIM_PWM_Start+0x11e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_TIM_PWM_Start+0x16c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_TIM_PWM_Start+0x11e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_TIM_PWM_Start+0x160>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d111      	bne.n	8001c96 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d010      	beq.n	8001ca6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c94:	e007      	b.n	8001ca6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40014400 	.word	0x40014400
 8001cbc:	40014800 	.word	0x40014800
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e042      	b.n	8001d5c <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223d      	movs	r2, #61	; 0x3d
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	223c      	movs	r2, #60	; 0x3c
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 f839 	bl	8001d64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223d      	movs	r2, #61	; 0x3d
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	0019      	movs	r1, r3
 8001d04:	0010      	movs	r0, r2
 8001d06:	f000 fdf9 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2246      	movs	r2, #70	; 0x46
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	223e      	movs	r2, #62	; 0x3e
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2241      	movs	r2, #65	; 0x41
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2242      	movs	r2, #66	; 0x42
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2243      	movs	r2, #67	; 0x43
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2244      	movs	r2, #68	; 0x44
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2245      	movs	r2, #69	; 0x45
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	223d      	movs	r2, #61	; 0x3d
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d104      	bne.n	8001d8e <HAL_TIM_IC_Start+0x1a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	223e      	movs	r2, #62	; 0x3e
 8001d88:	5c9b      	ldrb	r3, [r3, r2]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	e013      	b.n	8001db6 <HAL_TIM_IC_Start+0x42>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d104      	bne.n	8001d9e <HAL_TIM_IC_Start+0x2a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	223f      	movs	r2, #63	; 0x3f
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	e00b      	b.n	8001db6 <HAL_TIM_IC_Start+0x42>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d104      	bne.n	8001dae <HAL_TIM_IC_Start+0x3a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	e003      	b.n	8001db6 <HAL_TIM_IC_Start+0x42>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2241      	movs	r2, #65	; 0x41
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	220f      	movs	r2, #15
 8001db8:	18ba      	adds	r2, r7, r2
 8001dba:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d104      	bne.n	8001dcc <HAL_TIM_IC_Start+0x58>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2242      	movs	r2, #66	; 0x42
 8001dc6:	5c9b      	ldrb	r3, [r3, r2]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e013      	b.n	8001df4 <HAL_TIM_IC_Start+0x80>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d104      	bne.n	8001ddc <HAL_TIM_IC_Start+0x68>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2243      	movs	r2, #67	; 0x43
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e00b      	b.n	8001df4 <HAL_TIM_IC_Start+0x80>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d104      	bne.n	8001dec <HAL_TIM_IC_Start+0x78>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2244      	movs	r2, #68	; 0x44
 8001de6:	5c9b      	ldrb	r3, [r3, r2]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	e003      	b.n	8001df4 <HAL_TIM_IC_Start+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2245      	movs	r2, #69	; 0x45
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	210e      	movs	r1, #14
 8001df6:	187a      	adds	r2, r7, r1
 8001df8:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d103      	bne.n	8001e0c <HAL_TIM_IC_Start+0x98>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_IC_Start+0x9c>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e06e      	b.n	8001eee <HAL_TIM_IC_Start+0x17a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <HAL_TIM_IC_Start+0xac>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	223e      	movs	r2, #62	; 0x3e
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	5499      	strb	r1, [r3, r2]
 8001e1e:	e013      	b.n	8001e48 <HAL_TIM_IC_Start+0xd4>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d104      	bne.n	8001e30 <HAL_TIM_IC_Start+0xbc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	223f      	movs	r2, #63	; 0x3f
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	5499      	strb	r1, [r3, r2]
 8001e2e:	e00b      	b.n	8001e48 <HAL_TIM_IC_Start+0xd4>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d104      	bne.n	8001e40 <HAL_TIM_IC_Start+0xcc>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	5499      	strb	r1, [r3, r2]
 8001e3e:	e003      	b.n	8001e48 <HAL_TIM_IC_Start+0xd4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2241      	movs	r2, #65	; 0x41
 8001e44:	2102      	movs	r1, #2
 8001e46:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d104      	bne.n	8001e58 <HAL_TIM_IC_Start+0xe4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2242      	movs	r2, #66	; 0x42
 8001e52:	2102      	movs	r1, #2
 8001e54:	5499      	strb	r1, [r3, r2]
 8001e56:	e013      	b.n	8001e80 <HAL_TIM_IC_Start+0x10c>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d104      	bne.n	8001e68 <HAL_TIM_IC_Start+0xf4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2243      	movs	r2, #67	; 0x43
 8001e62:	2102      	movs	r1, #2
 8001e64:	5499      	strb	r1, [r3, r2]
 8001e66:	e00b      	b.n	8001e80 <HAL_TIM_IC_Start+0x10c>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d104      	bne.n	8001e78 <HAL_TIM_IC_Start+0x104>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2244      	movs	r2, #68	; 0x44
 8001e72:	2102      	movs	r1, #2
 8001e74:	5499      	strb	r1, [r3, r2]
 8001e76:	e003      	b.n	8001e80 <HAL_TIM_IC_Start+0x10c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2245      	movs	r2, #69	; 0x45
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f001 fa03 	bl	8003294 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_TIM_IC_Start+0x184>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <HAL_TIM_IC_Start+0x144>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_IC_Start+0x144>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_TIM_IC_Start+0x188>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_IC_Start+0x144>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_TIM_IC_Start+0x18c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_IC_Start+0x168>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_IC_Start+0x178>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_IC_Start+0x178>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40014000 	.word	0x40014000

08001f04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	230f      	movs	r3, #15
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d104      	bne.n	8001f26 <HAL_TIM_IC_Start_IT+0x22>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	223e      	movs	r2, #62	; 0x3e
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	e013      	b.n	8001f4e <HAL_TIM_IC_Start_IT+0x4a>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d104      	bne.n	8001f36 <HAL_TIM_IC_Start_IT+0x32>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	223f      	movs	r2, #63	; 0x3f
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	e00b      	b.n	8001f4e <HAL_TIM_IC_Start_IT+0x4a>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d104      	bne.n	8001f46 <HAL_TIM_IC_Start_IT+0x42>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e003      	b.n	8001f4e <HAL_TIM_IC_Start_IT+0x4a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2241      	movs	r2, #65	; 0x41
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	220e      	movs	r2, #14
 8001f50:	18ba      	adds	r2, r7, r2
 8001f52:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <HAL_TIM_IC_Start_IT+0x60>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2242      	movs	r2, #66	; 0x42
 8001f5e:	5c9b      	ldrb	r3, [r3, r2]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e013      	b.n	8001f8c <HAL_TIM_IC_Start_IT+0x88>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d104      	bne.n	8001f74 <HAL_TIM_IC_Start_IT+0x70>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2243      	movs	r2, #67	; 0x43
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e00b      	b.n	8001f8c <HAL_TIM_IC_Start_IT+0x88>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d104      	bne.n	8001f84 <HAL_TIM_IC_Start_IT+0x80>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2244      	movs	r2, #68	; 0x44
 8001f7e:	5c9b      	ldrb	r3, [r3, r2]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e003      	b.n	8001f8c <HAL_TIM_IC_Start_IT+0x88>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2245      	movs	r2, #69	; 0x45
 8001f88:	5c9b      	ldrb	r3, [r3, r2]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	210d      	movs	r1, #13
 8001f8e:	187a      	adds	r2, r7, r1
 8001f90:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f92:	230e      	movs	r3, #14
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d103      	bne.n	8001fa4 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d001      	beq.n	8001fa8 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b1      	b.n	800210c <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <HAL_TIM_IC_Start_IT+0xb4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	223e      	movs	r2, #62	; 0x3e
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	e013      	b.n	8001fe0 <HAL_TIM_IC_Start_IT+0xdc>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d104      	bne.n	8001fc8 <HAL_TIM_IC_Start_IT+0xc4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_TIM_IC_Start_IT+0xdc>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d104      	bne.n	8001fd8 <HAL_TIM_IC_Start_IT+0xd4>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	5499      	strb	r1, [r3, r2]
 8001fd6:	e003      	b.n	8001fe0 <HAL_TIM_IC_Start_IT+0xdc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2241      	movs	r2, #65	; 0x41
 8001fdc:	2102      	movs	r1, #2
 8001fde:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <HAL_TIM_IC_Start_IT+0xec>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2242      	movs	r2, #66	; 0x42
 8001fea:	2102      	movs	r1, #2
 8001fec:	5499      	strb	r1, [r3, r2]
 8001fee:	e013      	b.n	8002018 <HAL_TIM_IC_Start_IT+0x114>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d104      	bne.n	8002000 <HAL_TIM_IC_Start_IT+0xfc>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2243      	movs	r2, #67	; 0x43
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	5499      	strb	r1, [r3, r2]
 8001ffe:	e00b      	b.n	8002018 <HAL_TIM_IC_Start_IT+0x114>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b08      	cmp	r3, #8
 8002004:	d104      	bne.n	8002010 <HAL_TIM_IC_Start_IT+0x10c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2244      	movs	r2, #68	; 0x44
 800200a:	2102      	movs	r1, #2
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	e003      	b.n	8002018 <HAL_TIM_IC_Start_IT+0x114>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2245      	movs	r2, #69	; 0x45
 8002014:	2102      	movs	r1, #2
 8002016:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d02a      	beq.n	8002074 <HAL_TIM_IC_Start_IT+0x170>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d830      	bhi.n	8002086 <HAL_TIM_IC_Start_IT+0x182>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b08      	cmp	r3, #8
 8002028:	d01b      	beq.n	8002062 <HAL_TIM_IC_Start_IT+0x15e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d82a      	bhi.n	8002086 <HAL_TIM_IC_Start_IT+0x182>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IC_Start_IT+0x13a>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d009      	beq.n	8002050 <HAL_TIM_IC_Start_IT+0x14c>
 800203c:	e023      	b.n	8002086 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2102      	movs	r1, #2
 800204a:	430a      	orrs	r2, r1
 800204c:	60da      	str	r2, [r3, #12]
      break;
 800204e:	e01f      	b.n	8002090 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2104      	movs	r1, #4
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]
      break;
 8002060:	e016      	b.n	8002090 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2108      	movs	r1, #8
 800206e:	430a      	orrs	r2, r1
 8002070:	60da      	str	r2, [r3, #12]
      break;
 8002072:	e00d      	b.n	8002090 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2110      	movs	r1, #16
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
      break;
 8002084:	e004      	b.n	8002090 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8002086:	230f      	movs	r3, #15
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
      break;
 800208e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002090:	230f      	movs	r3, #15
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d135      	bne.n	8002106 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	0018      	movs	r0, r3
 80020a4:	f001 f8f6 	bl	8003294 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_TIM_IC_Start_IT+0x210>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00f      	beq.n	80020d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	05db      	lsls	r3, r3, #23
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d009      	beq.n	80020d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_TIM_IC_Start_IT+0x214>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_TIM_IC_Start_IT+0x1ce>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_TIM_IC_Start_IT+0x218>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d111      	bne.n	80020f6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2207      	movs	r2, #7
 80020da:	4013      	ands	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d010      	beq.n	8002106 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	e007      	b.n	8002106 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	781b      	ldrb	r3, [r3, #0]
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400
 800211c:	40014000 	.word	0x40014000

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d124      	bne.n	8002180 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d11d      	bne.n	8002180 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2203      	movs	r2, #3
 800214a:	4252      	negs	r2, r2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2203      	movs	r2, #3
 800215c:	4013      	ands	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	0018      	movs	r0, r3
 8002164:	f7fe f8bc 	bl	80002e0 <HAL_TIM_IC_CaptureCallback>
 8002168:	e007      	b.n	800217a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fbad 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 fbb1 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2204      	movs	r2, #4
 8002188:	4013      	ands	r3, r2
 800218a:	2b04      	cmp	r3, #4
 800218c:	d125      	bne.n	80021da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11e      	bne.n	80021da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2205      	movs	r2, #5
 80021a2:	4252      	negs	r2, r2
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	23c0      	movs	r3, #192	; 0xc0
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe f88f 	bl	80002e0 <HAL_TIM_IC_CaptureCallback>
 80021c2:	e007      	b.n	80021d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fb80 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fb84 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2208      	movs	r2, #8
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d124      	bne.n	8002232 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2208      	movs	r2, #8
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11d      	bne.n	8002232 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2209      	movs	r2, #9
 80021fc:	4252      	negs	r2, r2
 80021fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2203      	movs	r2, #3
 800220e:	4013      	ands	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe f863 	bl	80002e0 <HAL_TIM_IC_CaptureCallback>
 800221a:	e007      	b.n	800222c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f000 fb54 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	0018      	movs	r0, r3
 8002228:	f000 fb58 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2210      	movs	r2, #16
 800223a:	4013      	ands	r3, r2
 800223c:	2b10      	cmp	r3, #16
 800223e:	d125      	bne.n	800228c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2210      	movs	r2, #16
 8002248:	4013      	ands	r3, r2
 800224a:	2b10      	cmp	r3, #16
 800224c:	d11e      	bne.n	800228c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2211      	movs	r2, #17
 8002254:	4252      	negs	r2, r2
 8002256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2208      	movs	r2, #8
 800225c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	23c0      	movs	r3, #192	; 0xc0
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	0018      	movs	r0, r3
 8002270:	f7fe f836 	bl	80002e0 <HAL_TIM_IC_CaptureCallback>
 8002274:	e007      	b.n	8002286 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 fb27 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fb2b 	bl	80028dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10f      	bne.n	80022ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2202      	movs	r2, #2
 80022ae:	4252      	negs	r2, r2
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 fb01 	bl	80028bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d10f      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b80      	cmp	r3, #128	; 0x80
 80022d4:	d108      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2281      	movs	r2, #129	; 0x81
 80022dc:	4252      	negs	r2, r2
 80022de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f001 f8be 	bl	8003464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d10f      	bne.n	8002316 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2240      	movs	r2, #64	; 0x40
 80022fe:	4013      	ands	r3, r2
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d108      	bne.n	8002316 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2241      	movs	r2, #65	; 0x41
 800230a:	4252      	negs	r2, r2
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f000 faeb 	bl	80028ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2220      	movs	r2, #32
 800231e:	4013      	ands	r3, r2
 8002320:	2b20      	cmp	r3, #32
 8002322:	d10f      	bne.n	8002344 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	4013      	ands	r3, r2
 800232e:	2b20      	cmp	r3, #32
 8002330:	d108      	bne.n	8002344 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2221      	movs	r2, #33	; 0x21
 8002338:	4252      	negs	r2, r2
 800233a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f001 f888 	bl	8003454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2317      	movs	r3, #23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	223c      	movs	r2, #60	; 0x3c
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_TIM_IC_ConfigChannel+0x22>
 800236a:	2302      	movs	r3, #2
 800236c:	e08c      	b.n	8002488 <HAL_TIM_IC_ConfigChannel+0x13c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	223c      	movs	r2, #60	; 0x3c
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11b      	bne.n	80023b4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f000 fdc4 	bl	8002f18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	210c      	movs	r1, #12
 800239c:	438a      	bics	r2, r1
 800239e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6999      	ldr	r1, [r3, #24]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	619a      	str	r2, [r3, #24]
 80023b2:	e062      	b.n	800247a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d11c      	bne.n	80023f4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 fe2f 	bl	800302c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	492d      	ldr	r1, [pc, #180]	; (8002490 <HAL_TIM_IC_ConfigChannel+0x144>)
 80023da:	400a      	ands	r2, r1
 80023dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6999      	ldr	r1, [r3, #24]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	021a      	lsls	r2, r3, #8
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	619a      	str	r2, [r3, #24]
 80023f2:	e042      	b.n	800247a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d11b      	bne.n	8002432 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f000 fe83 	bl	8003114 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	210c      	movs	r1, #12
 800241a:	438a      	bics	r2, r1
 800241c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	61da      	str	r2, [r3, #28]
 8002430:	e023      	b.n	800247a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	d11c      	bne.n	8002472 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f000 fea4 	bl	8003194 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002458:	400a      	ands	r2, r1
 800245a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69d9      	ldr	r1, [r3, #28]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	021a      	lsls	r2, r3, #8
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
 8002470:	e003      	b.n	800247a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002472:	2317      	movs	r3, #23
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	223c      	movs	r2, #60	; 0x3c
 800247e:	2100      	movs	r1, #0
 8002480:	5499      	strb	r1, [r3, r2]

  return status;
 8002482:	2317      	movs	r3, #23
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b006      	add	sp, #24
 800248e:	bd80      	pop	{r7, pc}
 8002490:	fffff3ff 	.word	0xfffff3ff

08002494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2317      	movs	r3, #23
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	223c      	movs	r2, #60	; 0x3c
 80024ac:	5c9b      	ldrb	r3, [r3, r2]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0ad      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	223c      	movs	r2, #60	; 0x3c
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d100      	bne.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80024c4:	e076      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d900      	bls.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024cc:	e095      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d04e      	beq.n	8002572 <HAL_TIM_PWM_ConfigChannel+0xde>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d900      	bls.n	80024dc <HAL_TIM_PWM_ConfigChannel+0x48>
 80024da:	e08e      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_PWM_ConfigChannel+0x56>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d021      	beq.n	800252c <HAL_TIM_PWM_ConfigChannel+0x98>
 80024e8:	e087      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fa82 	bl	80029fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2108      	movs	r1, #8
 8002504:	430a      	orrs	r2, r1
 8002506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2104      	movs	r1, #4
 8002514:	438a      	bics	r2, r1
 8002516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6999      	ldr	r1, [r3, #24]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	619a      	str	r2, [r3, #24]
      break;
 800252a:	e06b      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	0011      	movs	r1, r2
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fae9 	bl	8002b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0109      	lsls	r1, r1, #4
 8002548:	430a      	orrs	r2, r1
 800254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4931      	ldr	r1, [pc, #196]	; (800261c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002558:	400a      	ands	r2, r1
 800255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      break;
 8002570:	e048      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fb4a 	bl	8002c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2108      	movs	r1, #8
 800258c:	430a      	orrs	r2, r1
 800258e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2104      	movs	r1, #4
 800259c:	438a      	bics	r2, r1
 800259e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69d9      	ldr	r1, [r3, #28]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	61da      	str	r2, [r3, #28]
      break;
 80025b2:	e027      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	0011      	movs	r1, r2
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fbaf 	bl	8002d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	0109      	lsls	r1, r1, #4
 80025d0:	430a      	orrs	r2, r1
 80025d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	490f      	ldr	r1, [pc, #60]	; (800261c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69d9      	ldr	r1, [r3, #28]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	61da      	str	r2, [r3, #28]
      break;
 80025f8:	e004      	b.n	8002604 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80025fa:	2317      	movs	r3, #23
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
      break;
 8002602:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	223c      	movs	r2, #60	; 0x3c
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

  return status;
 800260c:	2317      	movs	r3, #23
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b006      	add	sp, #24
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	fffffbff 	.word	0xfffffbff

08002620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	230f      	movs	r3, #15
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	223c      	movs	r2, #60	; 0x3c
 8002636:	5c9b      	ldrb	r3, [r3, r2]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIM_ConfigClockSource+0x20>
 800263c:	2302      	movs	r3, #2
 800263e:	e0bc      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x19a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	223c      	movs	r2, #60	; 0x3c
 8002644:	2101      	movs	r1, #1
 8002646:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223d      	movs	r2, #61	; 0x3d
 800264c:	2102      	movs	r1, #2
 800264e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2277      	movs	r2, #119	; 0x77
 800265c:	4393      	bics	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0192      	lsls	r2, r2, #6
 8002678:	4293      	cmp	r3, r2
 800267a:	d040      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xde>
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0192      	lsls	r2, r2, #6
 8002680:	4293      	cmp	r3, r2
 8002682:	d900      	bls.n	8002686 <HAL_TIM_ConfigClockSource+0x66>
 8002684:	e088      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	0152      	lsls	r2, r2, #5
 800268a:	4293      	cmp	r3, r2
 800268c:	d100      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x70>
 800268e:	e088      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x182>
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	0152      	lsls	r2, r2, #5
 8002694:	4293      	cmp	r3, r2
 8002696:	d900      	bls.n	800269a <HAL_TIM_ConfigClockSource+0x7a>
 8002698:	e07e      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 800269a:	2b70      	cmp	r3, #112	; 0x70
 800269c:	d018      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0xb0>
 800269e:	d900      	bls.n	80026a2 <HAL_TIM_ConfigClockSource+0x82>
 80026a0:	e07a      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 80026a2:	2b60      	cmp	r3, #96	; 0x60
 80026a4:	d04f      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x126>
 80026a6:	d900      	bls.n	80026aa <HAL_TIM_ConfigClockSource+0x8a>
 80026a8:	e076      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 80026aa:	2b50      	cmp	r3, #80	; 0x50
 80026ac:	d03b      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x106>
 80026ae:	d900      	bls.n	80026b2 <HAL_TIM_ConfigClockSource+0x92>
 80026b0:	e072      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d057      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x146>
 80026b6:	d900      	bls.n	80026ba <HAL_TIM_ConfigClockSource+0x9a>
 80026b8:	e06e      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 80026ba:	2b30      	cmp	r3, #48	; 0x30
 80026bc:	d063      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x166>
 80026be:	d86b      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d060      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x166>
 80026c4:	d868      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d05d      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x166>
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d05b      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x166>
 80026ce:	e063      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f000 fdb8 	bl	8003254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2277      	movs	r2, #119	; 0x77
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e052      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fda1 	bl	8003254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	01c9      	lsls	r1, r1, #7
 8002720:	430a      	orrs	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
      break;
 8002724:	e03e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	001a      	movs	r2, r3
 8002734:	f000 fc4c 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2150      	movs	r1, #80	; 0x50
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fd6e 	bl	8003220 <TIM_ITRx_SetConfig>
      break;
 8002744:	e02e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	001a      	movs	r2, r3
 8002754:	f000 fcac 	bl	80030b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2160      	movs	r1, #96	; 0x60
 800275e:	0018      	movs	r0, r3
 8002760:	f000 fd5e 	bl	8003220 <TIM_ITRx_SetConfig>
      break;
 8002764:	e01e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	001a      	movs	r2, r3
 8002774:	f000 fc2c 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fd4e 	bl	8003220 <TIM_ITRx_SetConfig>
      break;
 8002784:	e00e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0019      	movs	r1, r3
 8002790:	0010      	movs	r0, r2
 8002792:	f000 fd45 	bl	8003220 <TIM_ITRx_SetConfig>
      break;
 8002796:	e005      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002798:	230f      	movs	r3, #15
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
      break;
 80027a0:	e000      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	223d      	movs	r2, #61	; 0x3d
 80027a8:	2101      	movs	r1, #1
 80027aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	223c      	movs	r2, #60	; 0x3c
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

  return status;
 80027b4:	230f      	movs	r3, #15
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	781b      	ldrb	r3, [r3, #0]
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b004      	add	sp, #16
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	ffff00ff 	.word	0xffff00ff

080027c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	223c      	movs	r2, #60	; 0x3c
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80027dc:	2302      	movs	r3, #2
 80027de:	e032      	b.n	8002846 <HAL_TIM_SlaveConfigSynchro+0x7e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	223c      	movs	r2, #60	; 0x3c
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	223d      	movs	r2, #61	; 0x3d
 80027ec:	2102      	movs	r1, #2
 80027ee:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fafc 	bl	8002df4 <TIM_SlaveTimer_SetConfig>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d009      	beq.n	8002814 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	223d      	movs	r2, #61	; 0x3d
 8002804:	2101      	movs	r1, #1
 8002806:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223c      	movs	r2, #60	; 0x3c
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e018      	b.n	8002846 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	438a      	bics	r2, r1
 8002822:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8002830:	400a      	ands	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	223d      	movs	r2, #61	; 0x3d
 8002838:	2101      	movs	r1, #1
 800283a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	223c      	movs	r2, #60	; 0x3c
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	ffffbfff 	.word	0xffffbfff

08002854 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d01e      	beq.n	80028a6 <HAL_TIM_ReadCapturedValue+0x52>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d820      	bhi.n	80028b0 <HAL_TIM_ReadCapturedValue+0x5c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d013      	beq.n	800289c <HAL_TIM_ReadCapturedValue+0x48>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d81a      	bhi.n	80028b0 <HAL_TIM_ReadCapturedValue+0x5c>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_TIM_ReadCapturedValue+0x34>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d005      	beq.n	8002892 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002886:	e013      	b.n	80028b0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	60fb      	str	r3, [r7, #12]
      break;
 8002890:	e00f      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	60fb      	str	r3, [r7, #12]
      break;
 800289a:	e00a      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	60fb      	str	r3, [r7, #12]
      break;
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	60fb      	str	r3, [r7, #12]
      break;
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80028b0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}

080028fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d008      	beq.n	8002926 <TIM_Base_SetConfig+0x2a>
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	429a      	cmp	r2, r3
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0x2a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d108      	bne.n	8002938 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2270      	movs	r2, #112	; 0x70
 800292a:	4393      	bics	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	05db      	lsls	r3, r3, #23
 8002946:	429a      	cmp	r2, r3
 8002948:	d013      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00f      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <TIM_Base_SetConfig+0xec>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <TIM_Base_SetConfig+0xf0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <TIM_Base_SetConfig+0xf4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_Base_SetConfig+0x76>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <TIM_Base_SetConfig+0xf8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d108      	bne.n	8002984 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <TIM_Base_SetConfig+0xfc>)
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	4393      	bics	r3, r2
 800298a:	001a      	movs	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0xce>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <TIM_Base_SetConfig+0xf0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0xce>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <TIM_Base_SetConfig+0xf4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0xce>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <TIM_Base_SetConfig+0xf8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d103      	bne.n	80029d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	615a      	str	r2, [r3, #20]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40002000 	.word	0x40002000
 80029ec:	40014000 	.word	0x40014000
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40014800 	.word	0x40014800
 80029f8:	fffffcff 	.word	0xfffffcff

080029fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	001a      	movs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2270      	movs	r2, #112	; 0x70
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2203      	movs	r2, #3
 8002a32:	4393      	bics	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2202      	movs	r2, #2
 8002a44:	4393      	bics	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <TIM_OC1_SetConfig+0xf8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_OC1_SetConfig+0x76>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <TIM_OC1_SetConfig+0xfc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_OC1_SetConfig+0x76>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <TIM_OC1_SetConfig+0x100>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_OC1_SetConfig+0x76>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <TIM_OC1_SetConfig+0x104>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10c      	bne.n	8002a8c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2208      	movs	r2, #8
 8002a76:	4393      	bics	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2204      	movs	r2, #4
 8002a88:	4393      	bics	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <TIM_OC1_SetConfig+0xf8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00b      	beq.n	8002aac <TIM_OC1_SetConfig+0xb0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <TIM_OC1_SetConfig+0xfc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_OC1_SetConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <TIM_OC1_SetConfig+0x100>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_OC1_SetConfig+0xb0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <TIM_OC1_SetConfig+0x104>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <TIM_OC1_SetConfig+0x108>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <TIM_OC1_SetConfig+0x10c>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b006      	add	sp, #24
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40014000 	.word	0x40014000
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40014800 	.word	0x40014800
 8002b04:	fffffeff 	.word	0xfffffeff
 8002b08:	fffffdff 	.word	0xfffffdff

08002b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	001a      	movs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <TIM_OC2_SetConfig+0xe8>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <TIM_OC2_SetConfig+0xec>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2220      	movs	r2, #32
 8002b56:	4393      	bics	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <TIM_OC2_SetConfig+0xf0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d10d      	bne.n	8002b8a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	4393      	bics	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	4393      	bics	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <TIM_OC2_SetConfig+0xf0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00b      	beq.n	8002baa <TIM_OC2_SetConfig+0x9e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <TIM_OC2_SetConfig+0xf4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_OC2_SetConfig+0x9e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <TIM_OC2_SetConfig+0xf8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <TIM_OC2_SetConfig+0x9e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <TIM_OC2_SetConfig+0xfc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d113      	bne.n	8002bd2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <TIM_OC2_SetConfig+0x100>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <TIM_OC2_SetConfig+0x104>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b006      	add	sp, #24
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	ffff8fff 	.word	0xffff8fff
 8002bf8:	fffffcff 	.word	0xfffffcff
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800
 8002c0c:	fffffbff 	.word	0xfffffbff
 8002c10:	fffff7ff 	.word	0xfffff7ff

08002c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <TIM_OC3_SetConfig+0xe4>)
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2270      	movs	r2, #112	; 0x70
 8002c40:	4393      	bics	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2203      	movs	r2, #3
 8002c48:	4393      	bics	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <TIM_OC3_SetConfig+0xe8>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <TIM_OC3_SetConfig+0xec>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <TIM_OC3_SetConfig+0xf0>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <TIM_OC3_SetConfig+0xf4>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <TIM_OC3_SetConfig+0xec>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_OC3_SetConfig+0x9a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <TIM_OC3_SetConfig+0xf8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_OC3_SetConfig+0x9a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <TIM_OC3_SetConfig+0xfc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_OC3_SetConfig+0x9a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <TIM_OC3_SetConfig+0x100>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d113      	bne.n	8002cd6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <TIM_OC3_SetConfig+0x104>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <TIM_OC3_SetConfig+0x108>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	621a      	str	r2, [r3, #32]
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b006      	add	sp, #24
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffffeff 	.word	0xfffffeff
 8002cfc:	fffffdff 	.word	0xfffffdff
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	fffff7ff 	.word	0xfffff7ff
 8002d08:	fffffbff 	.word	0xfffffbff
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800
 8002d18:	ffffefff 	.word	0xffffefff
 8002d1c:	ffffdfff 	.word	0xffffdfff

08002d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <TIM_OC4_SetConfig+0xb0>)
 8002d30:	401a      	ands	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <TIM_OC4_SetConfig+0xb4>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <TIM_OC4_SetConfig+0xb8>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <TIM_OC4_SetConfig+0xbc>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <TIM_OC4_SetConfig+0xc0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00b      	beq.n	8002d98 <TIM_OC4_SetConfig+0x78>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <TIM_OC4_SetConfig+0xc4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_OC4_SetConfig+0x78>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <TIM_OC4_SetConfig+0xc8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_OC4_SetConfig+0x78>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a16      	ldr	r2, [pc, #88]	; (8002dec <TIM_OC4_SetConfig+0xcc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d109      	bne.n	8002dac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <TIM_OC4_SetConfig+0xd0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b006      	add	sp, #24
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	ffffefff 	.word	0xffffefff
 8002dd4:	ffff8fff 	.word	0xffff8fff
 8002dd8:	fffffcff 	.word	0xfffffcff
 8002ddc:	ffffdfff 	.word	0xffffdfff
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800
 8002df0:	ffffbfff 	.word	0xffffbfff

08002df4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2317      	movs	r3, #23
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2270      	movs	r2, #112	; 0x70
 8002e12:	4393      	bics	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2207      	movs	r2, #7
 8002e24:	4393      	bics	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b70      	cmp	r3, #112	; 0x70
 8002e40:	d015      	beq.n	8002e6e <TIM_SlaveTimer_SetConfig+0x7a>
 8002e42:	d900      	bls.n	8002e46 <TIM_SlaveTimer_SetConfig+0x52>
 8002e44:	e05b      	b.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
 8002e46:	2b60      	cmp	r3, #96	; 0x60
 8002e48:	d04f      	beq.n	8002eea <TIM_SlaveTimer_SetConfig+0xf6>
 8002e4a:	d858      	bhi.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d042      	beq.n	8002ed6 <TIM_SlaveTimer_SetConfig+0xe2>
 8002e50:	d855      	bhi.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d016      	beq.n	8002e84 <TIM_SlaveTimer_SetConfig+0x90>
 8002e56:	d852      	bhi.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
 8002e58:	2b30      	cmp	r3, #48	; 0x30
 8002e5a:	d055      	beq.n	8002f08 <TIM_SlaveTimer_SetConfig+0x114>
 8002e5c:	d84f      	bhi.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d052      	beq.n	8002f08 <TIM_SlaveTimer_SetConfig+0x114>
 8002e62:	d84c      	bhi.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d04f      	beq.n	8002f08 <TIM_SlaveTimer_SetConfig+0x114>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d04d      	beq.n	8002f08 <TIM_SlaveTimer_SetConfig+0x114>
 8002e6c:	e047      	b.n	8002efe <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68d9      	ldr	r1, [r3, #12]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f000 f9e9 	bl	8003254 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002e82:	e042      	b.n	8002f0a <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d101      	bne.n	8002e90 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e03f      	b.n	8002f10 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	22f0      	movs	r2, #240	; 0xf0
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]
      break;
 8002ed4:	e019      	b.n	8002f0a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	f000 f874 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002ee8:	e00f      	b.n	8002f0a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6899      	ldr	r1, [r3, #8]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	f000 f8da 	bl	80030b0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002efc:	e005      	b.n	8002f0a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002efe:	2317      	movs	r3, #23
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
      break;
 8002f06:	e000      	b.n	8002f0a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8002f08:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8002f0a:	2317      	movs	r3, #23
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b006      	add	sp, #24
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	001a      	movs	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <TIM_TI1_SetConfig+0xac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00c      	beq.n	8002f62 <TIM_TI1_SetConfig+0x4a>
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d007      	beq.n	8002f62 <TIM_TI1_SetConfig+0x4a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <TIM_TI1_SetConfig+0xb0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_TI1_SetConfig+0x4a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <TIM_TI1_SetConfig+0xb4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <TIM_TI1_SetConfig+0x4e>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <TIM_TI1_SetConfig+0x50>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	4393      	bics	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e003      	b.n	8002f86 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	22f0      	movs	r2, #240	; 0xf0
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	22ff      	movs	r2, #255	; 0xff
 8002f94:	4013      	ands	r3, r2
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	220a      	movs	r2, #10
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	220a      	movs	r2, #10
 8002fa8:	4013      	ands	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	621a      	str	r2, [r3, #32]
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b006      	add	sp, #24
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40014000 	.word	0x40014000

08002fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4393      	bics	r3, r2
 8002fea:	001a      	movs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	22f0      	movs	r2, #240	; 0xf0
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	220a      	movs	r2, #10
 800300c:	4393      	bics	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	621a      	str	r2, [r3, #32]
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b006      	add	sp, #24
 800302a:	bd80      	pop	{r7, pc}

0800302c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	2210      	movs	r2, #16
 8003040:	4393      	bics	r3, r2
 8003042:	001a      	movs	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <TIM_TI2_SetConfig+0x7c>)
 8003058:	4013      	ands	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4a10      	ldr	r2, [pc, #64]	; (80030ac <TIM_TI2_SetConfig+0x80>)
 800306a:	4013      	ands	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	22a0      	movs	r2, #160	; 0xa0
 8003080:	4393      	bics	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	22a0      	movs	r2, #160	; 0xa0
 800308a:	4013      	ands	r3, r2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b006      	add	sp, #24
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	fffffcff 	.word	0xfffffcff
 80030ac:	ffff0fff 	.word	0xffff0fff

080030b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	2210      	movs	r2, #16
 80030c2:	4393      	bics	r3, r2
 80030c4:	001a      	movs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4a0d      	ldr	r2, [pc, #52]	; (8003110 <TIM_TI2_ConfigInputStage+0x60>)
 80030da:	4013      	ands	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	22a0      	movs	r2, #160	; 0xa0
 80030ec:	4393      	bics	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b006      	add	sp, #24
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	ffff0fff 	.word	0xffff0fff

08003114 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a19      	ldr	r2, [pc, #100]	; (800318c <TIM_TI3_SetConfig+0x78>)
 8003128:	401a      	ands	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2203      	movs	r2, #3
 800313e:	4393      	bics	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	22f0      	movs	r2, #240	; 0xf0
 800314e:	4393      	bics	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	4013      	ands	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <TIM_TI3_SetConfig+0x7c>)
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	23a0      	movs	r3, #160	; 0xa0
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4013      	ands	r3, r2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b006      	add	sp, #24
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fffffeff 	.word	0xfffffeff
 8003190:	fffff5ff 	.word	0xfffff5ff

08003194 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a1a      	ldr	r2, [pc, #104]	; (8003210 <TIM_TI4_SetConfig+0x7c>)
 80031a8:	401a      	ands	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <TIM_TI4_SetConfig+0x80>)
 80031be:	4013      	ands	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <TIM_TI4_SetConfig+0x84>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	031b      	lsls	r3, r3, #12
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	0c1b      	lsrs	r3, r3, #16
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <TIM_TI4_SetConfig+0x88>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	031a      	lsls	r2, r3, #12
 80031ee:	23a0      	movs	r3, #160	; 0xa0
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	4013      	ands	r3, r2
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b006      	add	sp, #24
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	ffffefff 	.word	0xffffefff
 8003214:	fffffcff 	.word	0xfffffcff
 8003218:	ffff0fff 	.word	0xffff0fff
 800321c:	ffff5fff 	.word	0xffff5fff

08003220 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2270      	movs	r2, #112	; 0x70
 8003234:	4393      	bics	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	2207      	movs	r2, #7
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b004      	add	sp, #16
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <TIM_ETR_SetConfig+0x3c>)
 800326c:	4013      	ands	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	021a      	lsls	r2, r3, #8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	431a      	orrs	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	609a      	str	r2, [r3, #8]
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b006      	add	sp, #24
 800328e:	bd80      	pop	{r7, pc}
 8003290:	ffff00ff 	.word	0xffff00ff

08003294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	221f      	movs	r2, #31
 80032a4:	4013      	ands	r3, r2
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	0013      	movs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	43d2      	mvns	r2, r2
 80032b6:	401a      	ands	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1a      	ldr	r2, [r3, #32]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	211f      	movs	r1, #31
 80032c4:	400b      	ands	r3, r1
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4099      	lsls	r1, r3
 80032ca:	000b      	movs	r3, r1
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b006      	add	sp, #24
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223c      	movs	r2, #60	; 0x3c
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e047      	b.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	223c      	movs	r2, #60	; 0x3c
 80032f8:	2101      	movs	r1, #1
 80032fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	223d      	movs	r2, #61	; 0x3d
 8003300:	2102      	movs	r1, #2
 8003302:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2270      	movs	r2, #112	; 0x70
 8003318:	4393      	bics	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	05db      	lsls	r3, r3, #23
 8003340:	429a      	cmp	r2, r3
 8003342:	d009      	beq.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d10c      	bne.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	4393      	bics	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4313      	orrs	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223d      	movs	r2, #61	; 0x3d
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	223c      	movs	r2, #60	; 0x3c
 800337e:	2100      	movs	r1, #0
 8003380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b004      	add	sp, #16
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40014000 	.word	0x40014000

08003398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223c      	movs	r2, #60	; 0x3c
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e03e      	b.n	8003432 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	223c      	movs	r2, #60	; 0x3c
 80033b8:	2101      	movs	r1, #1
 80033ba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	22ff      	movs	r2, #255	; 0xff
 80033c0:	4393      	bics	r3, r2
 80033c2:	001a      	movs	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a1b      	ldr	r2, [pc, #108]	; (800343c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80033d0:	401a      	ands	r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80033de:	401a      	ands	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a16      	ldr	r2, [pc, #88]	; (8003444 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80033ec:	401a      	ands	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80033fa:	401a      	ands	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003408:	401a      	ands	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003416:	401a      	ands	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	223c      	movs	r2, #60	; 0x3c
 800342c:	2100      	movs	r1, #0
 800342e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	fffffcff 	.word	0xfffffcff
 8003440:	fffffbff 	.word	0xfffffbff
 8003444:	fffff7ff 	.word	0xfffff7ff
 8003448:	ffffefff 	.word	0xffffefff
 800344c:	ffffdfff 	.word	0xffffdfff
 8003450:	ffffbfff 	.word	0xffffbfff

08003454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <__libc_init_array>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	2600      	movs	r6, #0
 8003478:	4d0c      	ldr	r5, [pc, #48]	; (80034ac <__libc_init_array+0x38>)
 800347a:	4c0d      	ldr	r4, [pc, #52]	; (80034b0 <__libc_init_array+0x3c>)
 800347c:	1b64      	subs	r4, r4, r5
 800347e:	10a4      	asrs	r4, r4, #2
 8003480:	42a6      	cmp	r6, r4
 8003482:	d109      	bne.n	8003498 <__libc_init_array+0x24>
 8003484:	2600      	movs	r6, #0
 8003486:	f000 f821 	bl	80034cc <_init>
 800348a:	4d0a      	ldr	r5, [pc, #40]	; (80034b4 <__libc_init_array+0x40>)
 800348c:	4c0a      	ldr	r4, [pc, #40]	; (80034b8 <__libc_init_array+0x44>)
 800348e:	1b64      	subs	r4, r4, r5
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	42a6      	cmp	r6, r4
 8003494:	d105      	bne.n	80034a2 <__libc_init_array+0x2e>
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	00b3      	lsls	r3, r6, #2
 800349a:	58eb      	ldr	r3, [r5, r3]
 800349c:	4798      	blx	r3
 800349e:	3601      	adds	r6, #1
 80034a0:	e7ee      	b.n	8003480 <__libc_init_array+0xc>
 80034a2:	00b3      	lsls	r3, r6, #2
 80034a4:	58eb      	ldr	r3, [r5, r3]
 80034a6:	4798      	blx	r3
 80034a8:	3601      	adds	r6, #1
 80034aa:	e7f2      	b.n	8003492 <__libc_init_array+0x1e>
 80034ac:	08003514 	.word	0x08003514
 80034b0:	08003514 	.word	0x08003514
 80034b4:	08003514 	.word	0x08003514
 80034b8:	08003518 	.word	0x08003518

080034bc <memset>:
 80034bc:	0003      	movs	r3, r0
 80034be:	1882      	adds	r2, r0, r2
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d100      	bne.n	80034c6 <memset+0xa>
 80034c4:	4770      	bx	lr
 80034c6:	7019      	strb	r1, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	e7f9      	b.n	80034c0 <memset+0x4>

080034cc <_init>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d2:	bc08      	pop	{r3}
 80034d4:	469e      	mov	lr, r3
 80034d6:	4770      	bx	lr

080034d8 <_fini>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr
